[{"fields": {"model": "logentry", "name": "log entry", "app_label": "admin"}, "model": "contenttypes.contenttype", "pk": 1}, {"fields": {"model": "permission", "name": "permission", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 2}, {"fields": {"model": "group", "name": "group", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 3}, {"fields": {"model": "user", "name": "user", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 4}, {"fields": {"model": "contenttype", "name": "content type", "app_label": "contenttypes"}, "model": "contenttypes.contenttype", "pk": 5}, {"fields": {"model": "session", "name": "session", "app_label": "sessions"}, "model": "contenttypes.contenttype", "pk": 6}, {"fields": {"model": "problema", "name": "problema", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 7}, {"fields": {"model": "codigo", "name": "codigo", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 8}, {"fields": {"model": "similaridade", "name": "similaridade", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 9}, {"fields": {"model": "especialista", "name": "especialista", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 10}, {"fields": {"model": "criterioespecialista", "name": "criterio especialista", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 11}, {"fields": {"model": "avaliacaoespecialista", "name": "avaliacao especialista", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 12}, {"fields": {"model": "agrupamento", "name": "agrupamento", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 13}, {"fields": {"model": "avaliacaoagrupamento", "name": "avaliacao agrupamento", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 14}, {"fields": {"model": "grupo", "name": "grupo", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 15}, {"fields": {"model": "grupocodigo", "name": "grupo codigo", "app_label": "programacao"}, "model": "contenttypes.contenttype", "pk": 16}, {"fields": {"expire_date": "2018-07-10T18:03:37Z", "session_data": "Njc4MjM2ZWE2MTIyZmRhNTEzM2ZlOTUzMGFiZjFmOTU2NWZkNzhjMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYTM3MmFjN2Y0NTM0MDVlZmU4MzFlOGMzOTRhODFiOGI1NTIwZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIwfQ=="}, "model": "sessions.session", "pk": "1tm9qyt4u16nag69yl12oaud8fasw9eg"}, {"fields": {"expire_date": "2018-07-21T17:55:57Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "3rhrwphgi5wjhpfzh8qn3dz2ktahubs0"}, {"fields": {"expire_date": "2018-07-29T14:10:42Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "4vwmubkfbc15k16m9iwgpneyd53i6pss"}, {"fields": {"expire_date": "2018-07-09T15:07:07Z", "session_data": "NTFiZjk4NjYxMmY0NGY3YWQ2NjZkZjYxNzVkZGFmNjA0N2RjZjlhNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjcxMzkyMWVmZTg0NTVhNzQ2N2FiMjA1MTRjNTU5ZWMzZmI2Yjg3ZjUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIzfQ=="}, "model": "sessions.session", "pk": "4zdioesp32mqjkqipnigqy4c6ye78pry"}, {"fields": {"expire_date": "2018-07-09T15:07:36Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "59kk11d4zx6ic1czh2pz0q2yooj40ed4"}, {"fields": {"expire_date": "2018-07-30T03:08:07Z", "session_data": "Njk0OGMxMDM2NDc3YjM4NTQwMjA1NWUzMjUzYjc4NTc5YjQxYTU0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmZWRmMTQ0OGY0OTM5NGIwMDhlZDc5NTM5MWI3MGI5Y2IyYTgwOGUiLCJfYXV0aF91c2VyX2lkIjoxMSwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "6ru0xxbo85ym09wcnz0clfquiw313rbu"}, {"fields": {"expire_date": "2018-07-13T11:27:48Z", "session_data": "MDgzNDEyMzQ3OWRmYTAwMDBjNTA2YzFmNmY0NTExNDgxMjJkOWE4NTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ5NjIxODNlYzI0MDEwZjljOTZmNTkxYTY2ZTMxZTVjMjM2YjkwODIiLCJfYXV0aF91c2VyX2lkIjoxMywiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "8kjqts2hr2j5vq9jq2fdq3p4cyr99cye"}, {"fields": {"expire_date": "2018-07-27T12:06:01Z", "session_data": "Njk0OGMxMDM2NDc3YjM4NTQwMjA1NWUzMjUzYjc4NTc5YjQxYTU0Mzp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmZWRmMTQ0OGY0OTM5NGIwMDhlZDc5NTM5MWI3MGI5Y2IyYTgwOGUiLCJfYXV0aF91c2VyX2lkIjoxMSwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "a7nr1pmbabyv1noholbm3gfgar4ao806"}, {"fields": {"expire_date": "2018-07-23T02:43:47Z", "session_data": "ZTYyZWFjZDc0ZTE0MDMwMDMwNzAxMjNkNjk0YzI1YjhiZTZjNmQ5MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjQ5NjIxODNlYzI0MDEwZjljOTZmNTkxYTY2ZTMxZTVjMjM2YjkwODIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjEzfQ=="}, "model": "sessions.session", "pk": "actug6mhx4z4sjk5eh3cpzzf37wurd4f"}, {"fields": {"expire_date": "2018-07-14T11:05:54Z", "session_data": "MDBjMDcyNjYxZDQ3Mjg2M2MzZTkyZDViYzFjYzA5YmZiOTcwNDQ0ODp7Il9hdXRoX3VzZXJfaGFzaCI6ImRiYTVlMzEwZjVkZDgxZDgyMGVjZTJhN2QxZGYwMDg0ZjQ2OTY5YzAiLCJfYXV0aF91c2VyX2lkIjoxOCwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "aeq0wfd0ok5snsv7d1xk5j7p499rwf5b"}, {"fields": {"expire_date": "2018-07-23T14:50:38Z", "session_data": "NDRkMmNjYWRhNDM4ZTlhNjRmYzYyYjFhNDMzNjY5N2Q5YTMxMzliNjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ZGYyMmM0NzQ1YjRlMTU5M2E5MGZlNTYxMzI4Yzc2YzI3NDRiYWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjE1fQ=="}, "model": "sessions.session", "pk": "b01his4sgr0nhw0p28q20u12om2ly9ct"}, {"fields": {"expire_date": "2018-07-22T18:12:03Z", "session_data": "Njc4MjM2ZWE2MTIyZmRhNTEzM2ZlOTUzMGFiZjFmOTU2NWZkNzhjMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYTM3MmFjN2Y0NTM0MDVlZmU4MzFlOGMzOTRhODFiOGI1NTIwZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIwfQ=="}, "model": "sessions.session", "pk": "bbtan1ld13i1wnc2uk3vps7zvfzf43l3"}, {"fields": {"expire_date": "2018-07-02T12:35:29Z", "session_data": "OWI2Y2E1MzliZjJkMWZlOWI1NTBiMDBlZmYzYWRjMjExMWJhOTkxMzp7Il9hdXRoX3VzZXJfaGFzaCI6IjUxOWZmZmE5Yzg0YWMzMTRmNzk5NWRmNThkZDg5Njg2NzMzMThkZTciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjF9"}, "model": "sessions.session", "pk": "bhwlxzkh19vg7cjor1vlau55gbkfa1cx"}, {"fields": {"expire_date": "2018-07-04T21:44:11Z", "session_data": "Mjc1YjVmOTI4NDYwNDNlOThjM2FhZmE2NWMwYzVlYmY1M2YyMjUwZTp7Il9hdXRoX3VzZXJfaGFzaCI6ImRjN2U1NmI4YTc2NGJkYTNlMjc4ODVjOWViZWFjZGU5NGIwZmFjYTQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjEyfQ=="}, "model": "sessions.session", "pk": "bm4c1iefv5mf979ckd1poakthi2mjzj8"}, {"fields": {"expire_date": "2018-07-08T23:27:33Z", "session_data": "MzUzYzRjZTRmMDNmYzdmYWRkY2M5Mjk2ZTQ4NWZkNjQ1NjNkODgxOTp7Il9hdXRoX3VzZXJfaGFzaCI6ImIwNWU4OTE2ZjBmZTg1ZmI5ODlmYzZkOTk4YjYyYzE3MzQyZGIzMjciLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjJ9"}, "model": "sessions.session", "pk": "bqupxnmwnt62v4u3mvfnudhg7a5dlyg0"}, {"fields": {"expire_date": "2018-07-24T17:18:42Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "c4cpqn1psbq40c0e59561swk3ko1a4qv"}, {"fields": {"expire_date": "2018-07-18T11:48:27Z", "session_data": "Njc4MjM2ZWE2MTIyZmRhNTEzM2ZlOTUzMGFiZjFmOTU2NWZkNzhjMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYTM3MmFjN2Y0NTM0MDVlZmU4MzFlOGMzOTRhODFiOGI1NTIwZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIwfQ=="}, "model": "sessions.session", "pk": "ck515fxgiu9gk5k07u4qmqeo0fv0sdrg"}, {"fields": {"expire_date": "2018-07-30T11:37:04Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "daytymirhrr9yzx6h0uhqdfoc2rovei3"}, {"fields": {"expire_date": "2018-07-22T18:12:03Z", "session_data": "Njc4MjM2ZWE2MTIyZmRhNTEzM2ZlOTUzMGFiZjFmOTU2NWZkNzhjMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYTM3MmFjN2Y0NTM0MDVlZmU4MzFlOGMzOTRhODFiOGI1NTIwZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIwfQ=="}, "model": "sessions.session", "pk": "dm05okch3mcn657669i2xl7dkf223icv"}, {"fields": {"expire_date": "2018-07-05T02:52:58Z", "session_data": "NzAzM2UyYmExNWJkYWVkYTY1OTI5ZWZmYzAyZjNhYWFlMDYzZDRiMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmZWRmMTQ0OGY0OTM5NGIwMDhlZDc5NTM5MWI3MGI5Y2IyYTgwOGUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjExfQ=="}, "model": "sessions.session", "pk": "ek75icrvqnt4ug1m1pi8x4gfsffsrxnw"}, {"fields": {"expire_date": "2018-07-08T03:19:34Z", "session_data": "OGIwNDhkZmQwMTdhYjliY2JkODExZjJkMmM2MWQxOTAwNGEyZWU3MTp7Il9hdXRoX3VzZXJfaGFzaCI6ImNmMzcxY2VjOTUxYTM0Y2U2MGVkYjcxM2I4NmEyNjE5ZGExMzQ5M2YiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjZ9"}, "model": "sessions.session", "pk": "gazi545ew6nqzv9rjl30q5u611isq7im"}, {"fields": {"expire_date": "2018-07-05T22:06:16Z", "session_data": "YjBiNGE4YmRmMDRlMTYxODVhZmZiNTM4YmIzOGE3M2NkNjAzZGU4ZDp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmYTFjOTg3NDJiMjYwZDkxZmI5YmY1ZjllMDQ0ZWJhNTIxYTI2ZmMiLCJfYXV0aF91c2VyX2lkIjoxMCwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "hj9br6d62t3oqdfls3z7qlw9tm6yv8ts"}, {"fields": {"expire_date": "2018-07-24T18:34:06Z", "session_data": "Yjc4NzI0MGJlYzBmNzhlOGVkYjkzODViYzIzMTQ5NjQ4YjRkNGFjNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1YTA4NGVjYTcwNmM3NmM3MTllYzYxNWFkNmM4NzZjOWEyYzBjNWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIyfQ=="}, "model": "sessions.session", "pk": "jgkved8u3u9pplanyg4vec3ocx8avm4m"}, {"fields": {"expire_date": "2018-07-07T11:29:11Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "jkl7mx46to3l3dtva1lhczb70cl0asyb"}, {"fields": {"expire_date": "2018-08-02T20:46:34Z", "session_data": "Njc4MjM2ZWE2MTIyZmRhNTEzM2ZlOTUzMGFiZjFmOTU2NWZkNzhjMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYTM3MmFjN2Y0NTM0MDVlZmU4MzFlOGMzOTRhODFiOGI1NTIwZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIwfQ=="}, "model": "sessions.session", "pk": "kb9zqvft9oq52l74zaeykayo7hesxdjm"}, {"fields": {"expire_date": "2018-07-23T18:01:18Z", "session_data": "YzY5NjVlNjdhYjViYzMxZmVlMTMxZTZlNmMyYmFiOTUzMjM1ZTNmNjp7Il9hdXRoX3VzZXJfaGFzaCI6IjZmYTFjOTg3NDJiMjYwZDkxZmI5YmY1ZjllMDQ0ZWJhNTIxYTI2ZmMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjEwfQ=="}, "model": "sessions.session", "pk": "kw0agiiixfe23983h8o7hxgaho8xla6j"}, {"fields": {"expire_date": "2018-07-12T19:41:55Z", "session_data": "Yjc4NzI0MGJlYzBmNzhlOGVkYjkzODViYzIzMTQ5NjQ4YjRkNGFjNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1YTA4NGVjYTcwNmM3NmM3MTllYzYxNWFkNmM4NzZjOWEyYzBjNWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIyfQ=="}, "model": "sessions.session", "pk": "lpdfq8vqwvr8lnt44jv4po68aln3rkuh"}, {"fields": {"expire_date": "2018-07-05T15:27:01Z", "session_data": "Y2VhY2U4ODAzN2MwZDhkZmRjYjgzZDQ4ZTA1OTVlMzdhMDJiNGViMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjIyNGJkMjc5ZDliYjAwOTIzMDFkMTlhODgxZTVhMjczMWUwYTRhYWIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjl9"}, "model": "sessions.session", "pk": "nku7jgz88zv4u6q5sp9azlp3pcosral2"}, {"fields": {"expire_date": "2018-07-04T19:39:48Z", "session_data": "ZWQ5YTkyZTIyOGY1ODM3MTA2ODdlNjc1NTFkYTdlMWFkNWIzNmNmMjp7Il9hdXRoX3VzZXJfaGFzaCI6ImNhZWFmYmQ2YmIwMWQ1YWJlZWM0MDM5OWM1YWM3YWY2YWM5ZmUyZmIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjE5fQ=="}, "model": "sessions.session", "pk": "nm8n2ubuw4qxj3m2f7tzd0x7kuuj7442"}, {"fields": {"expire_date": "2018-07-09T10:57:33Z", "session_data": "NDRkMmNjYWRhNDM4ZTlhNjRmYzYyYjFhNDMzNjY5N2Q5YTMxMzliNjp7Il9hdXRoX3VzZXJfaGFzaCI6Ijg1ZGYyMmM0NzQ1YjRlMTU5M2E5MGZlNTYxMzI4Yzc2YzI3NDRiYWYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjE1fQ=="}, "model": "sessions.session", "pk": "nyewcywhanzxdwj0i82415jk903w2n5k"}, {"fields": {"expire_date": "2018-07-10T00:21:23Z", "session_data": "MzYwMzAxZWQzYmI2YWFmZGZmNTIyY2NiMjkxOTlhN2I0MTcwOWQ0ZTp7fQ=="}, "model": "sessions.session", "pk": "ouyw6w4uv7cryydnc438xr2rnhm12ygg"}, {"fields": {"expire_date": "2018-07-05T14:10:18Z", "session_data": "MzU0Y2JmNmUxYjNlMDBmMjZlZDVkYTc4MzcxZjg3MmY2ZmUzNDE1Nzp7Il9hdXRoX3VzZXJfaGFzaCI6IjQxNzZjOTA3YjczM2E1NmM0ZGQ2Zjk3NzMxNTc4ZDU0YTdhMTAwYTMiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjh9"}, "model": "sessions.session", "pk": "qj8h3267ezeq25piecm761886jdlouq7"}, {"fields": {"expire_date": "2018-07-29T11:09:41Z", "session_data": "MGYyMmE3NGI5YmEyNzNkZDYzYWYwMjMyMThmOGQ3YjJjODkzZjRkZDp7Il9hdXRoX3VzZXJfaGFzaCI6ImRiYTVlMzEwZjVkZDgxZDgyMGVjZTJhN2QxZGYwMDg0ZjQ2OTY5YzAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjE4fQ=="}, "model": "sessions.session", "pk": "ro1011zi34aiir33ytnparxp9rjhfoof"}, {"fields": {"expire_date": "2018-07-10T22:52:04Z", "session_data": "ZTUwYThkZWJlMTgxNmVjMzdhNGFmMjdkZGU1YzU3Y2U5YTkyMDI5MTp7Il9hdXRoX3VzZXJfaGFzaCI6IjRhZDZiMWE5ODBiOTNkODUxNjg3MDc5ODYyZWJmMDgzN2ZkY2MyYTEiLCJfYXV0aF91c2VyX2lkIjo3LCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCJ9"}, "model": "sessions.session", "pk": "t7h7wyawqskj5krhlfbkoprtze4ft214"}, {"fields": {"expire_date": "2018-07-27T00:10:55Z", "session_data": "Yjc4NzI0MGJlYzBmNzhlOGVkYjkzODViYzIzMTQ5NjQ4YjRkNGFjNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1YTA4NGVjYTcwNmM3NmM3MTllYzYxNWFkNmM4NzZjOWEyYzBjNWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIyfQ=="}, "model": "sessions.session", "pk": "tbjx3u5kuf0vjaty4a31zmm5qwq1aaj5"}, {"fields": {"expire_date": "2018-07-05T16:30:09Z", "session_data": "N2UzNjVlYmJiZGU1NGNkOWI1NTFiZjdmOWVmMzcyZDE1MzVlNzE4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImMyNjQ2NjM0MjJhZmUwZjEzYzFiYzMyMTM4NTYxYTM0MTFjYjVmZjciLCJfYXV0aF91c2VyX2lkIjoxNCwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQifQ=="}, "model": "sessions.session", "pk": "wg74eb0xqhqf9fwsmo7ca4gp4prs5vgo"}, {"fields": {"expire_date": "2018-07-04T21:50:20Z", "session_data": "Njc4MjM2ZWE2MTIyZmRhNTEzM2ZlOTUzMGFiZjFmOTU2NWZkNzhjMTp7Il9hdXRoX3VzZXJfaGFzaCI6IjczYTM3MmFjN2Y0NTM0MDVlZmU4MzFlOGMzOTRhODFiOGI1NTIwZTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIwfQ=="}, "model": "sessions.session", "pk": "y3qiytrbs0zpk0qhld3b7wvqpgwdug0w"}, {"fields": {"expire_date": "2018-07-31T18:50:30Z", "session_data": "YTBmNGU0ZmIxZjQxYTNhNmRkZDI2ZTBjY2VjYzhkOGFhYWQ0ZjQ2Njp7Il9hdXRoX3VzZXJfaGFzaCI6IjBlOGVmNmVhNTQwZWIyYWIwNzBmYjY1NDM0ZjY4Mjc2YzJhYjhhOTAiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjR9"}, "model": "sessions.session", "pk": "yl1nzje0t0omejo7fl00apwjcxsqdmnn"}, {"fields": {"expire_date": "2018-07-06T02:06:04Z", "session_data": "Yjc4NzI0MGJlYzBmNzhlOGVkYjkzODViYzIzMTQ5NjQ4YjRkNGFjNzp7Il9hdXRoX3VzZXJfaGFzaCI6IjI1YTA4NGVjYTcwNmM3NmM3MTllYzYxNWFkNmM4NzZjOWEyYzBjNWUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOjIyfQ=="}, "model": "sessions.session", "pk": "ytwuv71k5pyjltzmv4ytazhtn3h2vmkc"}, {"fields": {"tipo": "Basico", "nome": "Salario com Bonus", "publicar": false, "saida": "<p>Imprima o total que o funcion&aacute;rio dever&aacute; receber, conforme exemplo fornecido.</p>\r\n<p>Voc&ecirc; deve sempre arredondar. Por exemplo, se o resultado for 57.347, voc&ecirc; deve imprimir 57.35 e n&atilde;o 57.34</p>", "id_huxley": 280, "enunciado": "<p>Fa&ccedil;a um programa que leia o nome de um vendedor, o seu sal&aacute;rio fixo e o total de vendas efetuadas por ele no m&ecirc;s (em dinheiro). Sabendo que este vendedor ganha 15% de comiss&atilde;o sobre suas vendas efetuadas, informar o total a receber no final do m&ecirc;s, com duas casas decimais.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n</ul>", "entrada": "<p>O arquivo de entrada cont&eacute;m um texto (primeiro nome do vendedor) e 2 n&uacute;meros com duas casas decimais, representando o sal&aacute;rio fixo do vendedor e montante total das vendas efetuadas por este vendedor, respectivamente.</p>"}, "model": "programacao.problema", "pk": 1}, {"fields": {"tipo": "Basico", "nome": "Distancia entre dois pontos", "publicar": false, "saida": "<p>Calcule e imprima o valor da dist&acirc;ncia segundo a f&oacute;rmula fornecida, com 4 casas ap&oacute;s o ponto decimal.</p>", "id_huxley": 295, "enunciado": "<p>Leia os quatro valores correspondentes aos eixos x e y de dois pontos quaisquer no plano, p1(x1,y1) e p2(x2,y2) e calcule a dist&acirc;ncia entre eles, mostrando 4 casas decimais ap&oacute;s a v&iacute;rgula.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n</ul>", "entrada": "<p>O arquivo de entrada cont&eacute;m duas linhas de dados. Na primeira linha cont&eacute;m os valores inteiros: x1, y1 e na segunda linha cont&eacute;m os valores inteiros x2, y2.</p>"}, "model": "programacao.problema", "pk": 2}, {"fields": {"tipo": "Basico", "nome": "Fahrenheit para Celsius", "publicar": true, "saida": "<p>Um n&uacute;mero real, formatado com duas casas decimais, seguido de um final de&nbsp;linha.</p>", "id_huxley": 32, "enunciado": "<p>Converter uma temperatura dada em graus Fahrenheit para graus Celsius.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n</ul>", "entrada": "<p>A temperatura em Fahrenheit &eacute; dada como um n&uacute;mero real.</p>"}, "model": "programacao.problema", "pk": 3}, {"fields": {"tipo": "Basico", "nome": "Consumo", "publicar": true, "saida": "<p>Apresente o valor que representa o consumo m&eacute;dio do autom&oacute;vel com 3 casas ap&oacute;s a v&iacute;rgula, seguido da mensagem \"km/l\".</p>", "id_huxley": 294, "enunciado": "<p>Calcule o consumo m&eacute;dio de um autom&oacute;vel sendo fornecidos a dist&acirc;ncia total percorrida (em Km) e o total de combust&iacute;vel gasto (em litros).</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n</ul>", "entrada": "<p>O arquivo de entrada cont&eacute;m dois valores: um valor inteiro X representando a dist&acirc;ncia total percorrida (em Km) e um valor real Y representando o total de combust&iacute;vel gasto.</p>"}, "model": "programacao.problema", "pk": 4}, {"fields": {"tipo": "Decisao", "nome": "Aprovado", "publicar": false, "saida": "<p>Uma mensagem que pode ser:</p>\r\n<p>aprovado<br />reprovado<br />prova final</p>\r\n<ul>\r\n</ul>\r\n<p>&nbsp;</p>", "id_huxley": 39, "enunciado": "<p style=\"text-align: left;\">Fa&ccedil;a um programa que leia tr&ecirc;s notas (valores reais) de um aluno, calcule sua m&eacute;dia aritm&eacute;tica e imprima uma mensagem dizendo se o aluno foi aprovado, reprovado ou dever&aacute; fazer prova final. O crit&eacute;rio de aprova&ccedil;&atilde;o &eacute; o seguinte:</p>\r\n<p>Aprovado (m&eacute;dia &gt;= 7);<br />Reprovado (m&eacute;dia &lt; 3);<br />Prova final ( 3 &lt;= m&eacute;dia &lt; 7).</p>\r\n<ol style=\"text-align: left;\"> </ol>\r\n<p style=\"text-align: left;\">&nbsp;</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>\r\n</ul>", "entrada": "<p>03 n&uacute;meros reais separados por um final de linha.</p>"}, "model": "programacao.problema", "pk": 5}, {"fields": {"tipo": "Decisao", "nome": "Eleitor", "publicar": false, "saida": "<p>Uma linha escrito:</p>\r\n<p>\"nao eleitor\", \"eleitor obrigatorio\" ou \"eleitor facultativo\" (sem as aspas) de acordo com o crit&eacute;rio da descri&ccedil;&atilde;o.</p>", "id_huxley": 42, "enunciado": "<p>Fa&ccedil;a um programa que leia a idade (valor inteiro) de uma pessoa e informe sua classe eleitoral:<br /><br />nao eleitor (abaixo de 16 anos)<br />eleitor obrigatorio (maior e igual a 18 ou menor e igual a 65 anos)<br />eleitor facultativo (entre 16 e 18 anos ou acima dos 65 anos)</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>\r\n</ul>", "entrada": "<p>Consiste de um n&uacute;mero inteiro indicando a idade da pessoa.</p>"}, "model": "programacao.problema", "pk": 6}, {"fields": {"tipo": "Decisao", "nome": "Classificacao de Triangulos", "publicar": true, "saida": "<p>A sa&iacute;da deve ser: \"escaleno\", \"isosceles\" ou \"equilatero\" seguido de um final delinha.<br />Obs.: as aspas acima n&atilde;o devem ser impressas e a sa&iacute;da deve ser impressa sem acentos.</p>", "id_huxley": 49, "enunciado": "<p>Os triangulos mais simples sao classificados de acordo com os limites das proporcoes relativas de seus lados:</p>&#13;<p><br/>Um triangulo equilatero possui todos os lados congruentes ou seja iguais. Um triangulo equilatero e tambem equiangulo: todos os seus angulos internos sao congruentes (medem 60), sendo, portanto, classificado como um poligono<br/>regular.</p>&#13;<p><br/>Um triangulo isosceles possui pelo menos dois lados de mesma medida e dois angulos congruentes. O triangulo equilatero e, consequentemente,<br/>um caso especial de um triangulo isosceles, que apresenta nao somente dois, mas todos os tres lados iguais, assim como os angulos, que medem<br/>todos 60o. Num triangulo isosceles, o angulo formado pelos lados congruentes e chamado angulo do vertice. Os demais angulos<br/>denominam-se angulos da base e sao congruentes.</p>&#13;<p><br/>Em um triangulo escaleno, as medidas dos tres lados sao diferentes. Os angulos internos de um triangulo escaleno tambem possuem medidas<br/>diferentes.<br/>                                                  <img src=\"https://thehuxley.com/api/v1/problems/image/f80801e5a94fea581ba1eca586ff4b56.png\" border=\"0\"/><br/>Sua missao e escrever um programa para classificar um triangulo de lados de comprimentos dados em: escaleno (os tres lados de comprimentos diferentes), isosceles (dois lados de comprimentos iguais) ou equilatero (os tres lados de comprimentos iguais).</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>\r\n</ul>", "entrada": "<p>A entrada consiste de 03 n&uacute;meros reais maiores que zero correspondendo ao comprimento dos lados do tri&acirc;ngulo.</p>"}, "model": "programacao.problema", "pk": 7}, {"fields": {"tipo": "Decisao", "nome": "3 Numeros em Ordem Crescente", "publicar": true, "saida": "<p>Os 03 numeros lidos impressos em ordem crescente, cada um em uma linha.</p>", "id_huxley": 2, "enunciado": "<p>Faca um programa que leia 3 numeros inteiros e os imprima em ordem crescente.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>\r\n</ul>", "entrada": "<p>03 numeros inteiros separados por um final de linha.</p>"}, "model": "programacao.problema", "pk": 8}, {"fields": {"tipo": "Repeticao", "nome": "Loop de impares", "publicar": false, "saida": "<p>Todos os n&uacute;meros &iacute;mpares maiores ou iguais a n e menores ou iguais a m, separados por um final de linha.</p>", "id_huxley": 21, "enunciado": "<p>Fa&ccedil;a um programa que imprima todos os n&uacute;meros &iacute;mpares entre dois n&uacute;meros dados.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (for)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (while)\r\n    <li>Estruturas de repeti\u00e7\u00e3o aninhadas\r\n</ul>", "entrada": "<p>Dois n&uacute;meros inteiros, n e m, separados por um final de linha.</p>"}, "model": "programacao.problema", "pk": 9}, {"fields": {"tipo": "Repeticao", "nome": "Divisivel por 3", "publicar": false, "saida": "<p>Um inteiro R seguido de um final de linha, sendo R o n&uacute;mero de divisores de N que s&atilde;o divisiveis por 3. Caso n&atilde;o tenha nenhum imprima&nbsp;\"O numero nao possui divisores multiplos de 3!\" sem as aspas e com um final de linha.</p>", "id_huxley": 342, "enunciado": "<p>O problema envolve achar a quantidade de divisores de um n&uacute;mero que s&atilde;o divis&iacute;veis por 3.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (for)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (while)\r\n    <li>Estruturas de repeti\u00e7\u00e3o aninhadas\r\n</ul>", "entrada": "<p>Um inteiro N.</p>"}, "model": "programacao.problema", "pk": 10}, {"fields": {"tipo": "Repeticao", "nome": "Maior Multiplo", "publicar": true, "saida": "<p>A sa&iacute;da consiste do maior n&uacute;mero que seja m&uacute;ltiplo de M e menor que N, se n&atilde;o houver um m&uacute;ltiplo de M menor que N voc&ecirc; deve imprimir \"sem multiplos menores que N\", sem as aspas, onde N deve ser substitu&iacute;do pelo valor de entrada N.</p>", "id_huxley": 36, "enunciado": "<p>Seu objetivo &eacute; determinar o maior m&uacute;ltiplo de um inteiro dado menor do que ou igual a um outro inteiro dado</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (for)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (while)\r\n    <li>Estruturas de repeti\u00e7\u00e3o aninhadas\r\n</ul>", "entrada": "<p>Consiste de dois inteiros positivos M e N.</p>"}, "model": "programacao.problema", "pk": 11}, {"fields": {"tipo": "Repeticao", "nome": "Fatorial", "publicar": true, "saida": "<p>Para cada n, deve-se imprimir um inteiro k seguido de um final de linha, correspondendo ao&nbsp;fatorial.</p>", "id_huxley": 24, "enunciado": "<p>Calcule os fatoriais de uma sequ&ecirc;ncia de n&uacute;meros dada.</p>", "conteudo": "<ul>\r\n    <li>Conceitos b\u00e1sicos sobre algoritmos\r\n    <li>Compila\u00e7\u00e3o e interpreta\u00e7\u00e3o\r\n    <li>Vari\u00e1veis e tipos de dados\r\n    <li>Operadores matem\u00e1ticos\r\n    <li>Operadores relacionais\r\n    <li>Entrada e sa\u00edda de dados\r\n    <li>Operadores l\u00f3gicos\r\n    <li>Estrutura condicional simples (if)\r\n    <li>Estrutura condicional composta (if-elif-else)\r\n    <li>Estruturas condicionais aninhadas (ou encadeadas)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (for)\r\n    <li>Estrutura de repeti\u00e7\u00e3o (while)\r\n    <li>Estruturas de repeti\u00e7\u00e3o aninhadas\r\n</ul>", "entrada": "<p>O programa receber&aacute; uma sequ&ecirc;ncia de inteiros n, onde 0&lt;=n&lt;=12.<br />O programa encerra a sua execu&ccedil;&atilde;o quando o n&uacute;mero n dado for -1.</p>"}, "model": "programacao.problema", "pk": 12}